Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LLAVDER
    LLAVIZQ
    PTCOMA

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> imprimir_instr
Rule 5     instruccion -> definicion_instr
Rule 6     instruccion -> asignacion_instr
Rule 7     instruccion -> mientras_instr
Rule 8     instruccion -> repeat_instr
Rule 9     instruccion -> if_instr
Rule 10    instruccion -> if_else_instr
Rule 11    imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER
Rule 12    definicion_instr -> NUMERO ID
Rule 13    asignacion_instr -> ID IGUAL expresion_numerica
Rule 14    mientras_instr -> WHILE expresion_logica CORIZQ instrucciones CORDER
Rule 15    repeat_instr -> REPEAT expresion_numerica CORIZQ instrucciones CORDER
Rule 16    if_instr -> IF expresion_logica CORIZQ instrucciones CORDER
Rule 17    if_else_instr -> IF expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones CORDER
Rule 18    expresion_numerica -> expresion_numerica MAS expresion_numerica
Rule 19    expresion_numerica -> expresion_numerica MENOS expresion_numerica
Rule 20    expresion_numerica -> expresion_numerica POR expresion_numerica
Rule 21    expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica
Rule 22    expresion_numerica -> MENOS expresion_numerica
Rule 23    expresion_numerica -> PARIZQ expresion_numerica PARDER
Rule 24    expresion_numerica -> ENTERO
Rule 25    expresion_numerica -> DECIMAL
Rule 26    expresion_numerica -> ID
Rule 27    expresion_cadena -> expresion_cadena CONCAT expresion_cadena
Rule 28    expresion_cadena -> CADENA
Rule 29    expresion_cadena -> expresion_numerica
Rule 30    expresion_logica -> expresion_numerica MAYQUE expresion_numerica
Rule 31    expresion_logica -> expresion_numerica MENQUE expresion_numerica
Rule 32    expresion_logica -> expresion_numerica IGUALQUE expresion_numerica
Rule 33    expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica

Terminals, with rules where they appear

CADENA               : 28
CONCAT               : 27
CORDER               : 14 15 16 17 17
CORIZQ               : 14 15 16 17 17
DECIMAL              : 25
DIVIDIDO             : 21
ELSE                 : 17
ENTERO               : 24
ID                   : 12 13 26
IF                   : 16 17
IGUAL                : 13
IGUALQUE             : 32
IMPRIMIR             : 11
LLAVDER              : 
LLAVIZQ              : 
MAS                  : 18
MAYQUE               : 30
MENOS                : 19 22
MENQUE               : 31
NIGUALQUE            : 33
NUMERO               : 12
PARDER               : 11 23
PARIZQ               : 11 23
POR                  : 20
PTCOMA               : 
REPEAT               : 15
WHILE                : 14
error                : 

Nonterminals, with rules where they appear

asignacion_instr     : 6
definicion_instr     : 5
expresion_cadena     : 11 27 27
expresion_logica     : 14 16 17
expresion_numerica   : 13 15 18 18 19 19 20 20 21 21 22 23 29 30 30 31 31 32 32 33 33
if_else_instr        : 10
if_instr             : 9
imprimir_instr       : 4
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 14 15 16 17 17
mientras_instr       : 7
repeat_instr         : 8

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . repeat_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER
    (12) definicion_instr -> . NUMERO ID
    (13) asignacion_instr -> . ID IGUAL expresion_numerica
    (14) mientras_instr -> . WHILE expresion_logica CORIZQ instrucciones CORDER
    (15) repeat_instr -> . REPEAT expresion_numerica CORIZQ instrucciones CORDER
    (16) if_instr -> . IF expresion_logica CORIZQ instrucciones CORDER
    (17) if_else_instr -> . IF expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones CORDER

    IMPRIMIR        shift and go to state 11
    NUMERO          shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    IF              shift and go to state 16

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    repeat_instr                   shift and go to state 8
    if_instr                       shift and go to state 9
    if_else_instr                  shift and go to state 10

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . repeat_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER
    (12) definicion_instr -> . NUMERO ID
    (13) asignacion_instr -> . ID IGUAL expresion_numerica
    (14) mientras_instr -> . WHILE expresion_logica CORIZQ instrucciones CORDER
    (15) repeat_instr -> . REPEAT expresion_numerica CORIZQ instrucciones CORDER
    (16) if_instr -> . IF expresion_logica CORIZQ instrucciones CORDER
    (17) if_else_instr -> . IF expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones CORDER

    $end            reduce using rule 1 (init -> instrucciones .)
    IMPRIMIR        shift and go to state 11
    NUMERO          shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    IF              shift and go to state 16

    instruccion                    shift and go to state 17
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    repeat_instr                   shift and go to state 8
    if_instr                       shift and go to state 9
    if_else_instr                  shift and go to state 10

state 3

    (3) instrucciones -> instruccion .

    IMPRIMIR        reduce using rule 3 (instrucciones -> instruccion .)
    NUMERO          reduce using rule 3 (instrucciones -> instruccion .)
    ID              reduce using rule 3 (instrucciones -> instruccion .)
    WHILE           reduce using rule 3 (instrucciones -> instruccion .)
    REPEAT          reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    CORDER          reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> imprimir_instr .

    IMPRIMIR        reduce using rule 4 (instruccion -> imprimir_instr .)
    NUMERO          reduce using rule 4 (instruccion -> imprimir_instr .)
    ID              reduce using rule 4 (instruccion -> imprimir_instr .)
    WHILE           reduce using rule 4 (instruccion -> imprimir_instr .)
    REPEAT          reduce using rule 4 (instruccion -> imprimir_instr .)
    IF              reduce using rule 4 (instruccion -> imprimir_instr .)
    $end            reduce using rule 4 (instruccion -> imprimir_instr .)
    CORDER          reduce using rule 4 (instruccion -> imprimir_instr .)


state 5

    (5) instruccion -> definicion_instr .

    IMPRIMIR        reduce using rule 5 (instruccion -> definicion_instr .)
    NUMERO          reduce using rule 5 (instruccion -> definicion_instr .)
    ID              reduce using rule 5 (instruccion -> definicion_instr .)
    WHILE           reduce using rule 5 (instruccion -> definicion_instr .)
    REPEAT          reduce using rule 5 (instruccion -> definicion_instr .)
    IF              reduce using rule 5 (instruccion -> definicion_instr .)
    $end            reduce using rule 5 (instruccion -> definicion_instr .)
    CORDER          reduce using rule 5 (instruccion -> definicion_instr .)


state 6

    (6) instruccion -> asignacion_instr .

    IMPRIMIR        reduce using rule 6 (instruccion -> asignacion_instr .)
    NUMERO          reduce using rule 6 (instruccion -> asignacion_instr .)
    ID              reduce using rule 6 (instruccion -> asignacion_instr .)
    WHILE           reduce using rule 6 (instruccion -> asignacion_instr .)
    REPEAT          reduce using rule 6 (instruccion -> asignacion_instr .)
    IF              reduce using rule 6 (instruccion -> asignacion_instr .)
    $end            reduce using rule 6 (instruccion -> asignacion_instr .)
    CORDER          reduce using rule 6 (instruccion -> asignacion_instr .)


state 7

    (7) instruccion -> mientras_instr .

    IMPRIMIR        reduce using rule 7 (instruccion -> mientras_instr .)
    NUMERO          reduce using rule 7 (instruccion -> mientras_instr .)
    ID              reduce using rule 7 (instruccion -> mientras_instr .)
    WHILE           reduce using rule 7 (instruccion -> mientras_instr .)
    REPEAT          reduce using rule 7 (instruccion -> mientras_instr .)
    IF              reduce using rule 7 (instruccion -> mientras_instr .)
    $end            reduce using rule 7 (instruccion -> mientras_instr .)
    CORDER          reduce using rule 7 (instruccion -> mientras_instr .)


state 8

    (8) instruccion -> repeat_instr .

    IMPRIMIR        reduce using rule 8 (instruccion -> repeat_instr .)
    NUMERO          reduce using rule 8 (instruccion -> repeat_instr .)
    ID              reduce using rule 8 (instruccion -> repeat_instr .)
    WHILE           reduce using rule 8 (instruccion -> repeat_instr .)
    REPEAT          reduce using rule 8 (instruccion -> repeat_instr .)
    IF              reduce using rule 8 (instruccion -> repeat_instr .)
    $end            reduce using rule 8 (instruccion -> repeat_instr .)
    CORDER          reduce using rule 8 (instruccion -> repeat_instr .)


state 9

    (9) instruccion -> if_instr .

    IMPRIMIR        reduce using rule 9 (instruccion -> if_instr .)
    NUMERO          reduce using rule 9 (instruccion -> if_instr .)
    ID              reduce using rule 9 (instruccion -> if_instr .)
    WHILE           reduce using rule 9 (instruccion -> if_instr .)
    REPEAT          reduce using rule 9 (instruccion -> if_instr .)
    IF              reduce using rule 9 (instruccion -> if_instr .)
    $end            reduce using rule 9 (instruccion -> if_instr .)
    CORDER          reduce using rule 9 (instruccion -> if_instr .)


state 10

    (10) instruccion -> if_else_instr .

    IMPRIMIR        reduce using rule 10 (instruccion -> if_else_instr .)
    NUMERO          reduce using rule 10 (instruccion -> if_else_instr .)
    ID              reduce using rule 10 (instruccion -> if_else_instr .)
    WHILE           reduce using rule 10 (instruccion -> if_else_instr .)
    REPEAT          reduce using rule 10 (instruccion -> if_else_instr .)
    IF              reduce using rule 10 (instruccion -> if_else_instr .)
    $end            reduce using rule 10 (instruccion -> if_else_instr .)
    CORDER          reduce using rule 10 (instruccion -> if_else_instr .)


state 11

    (11) imprimir_instr -> IMPRIMIR . PARIZQ expresion_cadena PARDER

    PARIZQ          shift and go to state 18


state 12

    (12) definicion_instr -> NUMERO . ID

    ID              shift and go to state 19


state 13

    (13) asignacion_instr -> ID . IGUAL expresion_numerica

    IGUAL           shift and go to state 20


state 14

    (14) mientras_instr -> WHILE . expresion_logica CORIZQ instrucciones CORDER
    (30) expresion_logica -> . expresion_numerica MAYQUE expresion_numerica
    (31) expresion_logica -> . expresion_numerica MENQUE expresion_numerica
    (32) expresion_logica -> . expresion_numerica IGUALQUE expresion_numerica
    (33) expresion_logica -> . expresion_numerica NIGUALQUE expresion_numerica
    (18) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (19) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (20) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (21) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (22) expresion_numerica -> . MENOS expresion_numerica
    (23) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (24) expresion_numerica -> . ENTERO
    (25) expresion_numerica -> . DECIMAL
    (26) expresion_numerica -> . ID

    MENOS           shift and go to state 23
    PARIZQ          shift and go to state 24
    ENTERO          shift and go to state 25
    DECIMAL         shift and go to state 26
    ID              shift and go to state 27

    expresion_logica               shift and go to state 21
    expresion_numerica             shift and go to state 22

state 15

    (15) repeat_instr -> REPEAT . expresion_numerica CORIZQ instrucciones CORDER
    (18) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (19) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (20) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (21) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (22) expresion_numerica -> . MENOS expresion_numerica
    (23) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (24) expresion_numerica -> . ENTERO
    (25) expresion_numerica -> . DECIMAL
    (26) expresion_numerica -> . ID

    MENOS           shift and go to state 23
    PARIZQ          shift and go to state 24
    ENTERO          shift and go to state 25
    DECIMAL         shift and go to state 26
    ID              shift and go to state 27

    expresion_numerica             shift and go to state 28

state 16

    (16) if_instr -> IF . expresion_logica CORIZQ instrucciones CORDER
    (17) if_else_instr -> IF . expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones CORDER
    (30) expresion_logica -> . expresion_numerica MAYQUE expresion_numerica
    (31) expresion_logica -> . expresion_numerica MENQUE expresion_numerica
    (32) expresion_logica -> . expresion_numerica IGUALQUE expresion_numerica
    (33) expresion_logica -> . expresion_numerica NIGUALQUE expresion_numerica
    (18) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (19) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (20) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (21) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (22) expresion_numerica -> . MENOS expresion_numerica
    (23) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (24) expresion_numerica -> . ENTERO
    (25) expresion_numerica -> . DECIMAL
    (26) expresion_numerica -> . ID

    MENOS           shift and go to state 23
    PARIZQ          shift and go to state 24
    ENTERO          shift and go to state 25
    DECIMAL         shift and go to state 26
    ID              shift and go to state 27

    expresion_logica               shift and go to state 29
    expresion_numerica             shift and go to state 22

state 17

    (2) instrucciones -> instrucciones instruccion .

    IMPRIMIR        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    NUMERO          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    WHILE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    REPEAT          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CORDER          reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 18

    (11) imprimir_instr -> IMPRIMIR PARIZQ . expresion_cadena PARDER
    (27) expresion_cadena -> . expresion_cadena CONCAT expresion_cadena
    (28) expresion_cadena -> . CADENA
    (29) expresion_cadena -> . expresion_numerica
    (18) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (19) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (20) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (21) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (22) expresion_numerica -> . MENOS expresion_numerica
    (23) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (24) expresion_numerica -> . ENTERO
    (25) expresion_numerica -> . DECIMAL
    (26) expresion_numerica -> . ID

    CADENA          shift and go to state 31
    MENOS           shift and go to state 23
    PARIZQ          shift and go to state 24
    ENTERO          shift and go to state 25
    DECIMAL         shift and go to state 26
    ID              shift and go to state 27

    expresion_cadena               shift and go to state 30
    expresion_numerica             shift and go to state 32

state 19

    (12) definicion_instr -> NUMERO ID .

    IMPRIMIR        reduce using rule 12 (definicion_instr -> NUMERO ID .)
    NUMERO          reduce using rule 12 (definicion_instr -> NUMERO ID .)
    ID              reduce using rule 12 (definicion_instr -> NUMERO ID .)
    WHILE           reduce using rule 12 (definicion_instr -> NUMERO ID .)
    REPEAT          reduce using rule 12 (definicion_instr -> NUMERO ID .)
    IF              reduce using rule 12 (definicion_instr -> NUMERO ID .)
    $end            reduce using rule 12 (definicion_instr -> NUMERO ID .)
    CORDER          reduce using rule 12 (definicion_instr -> NUMERO ID .)


state 20

    (13) asignacion_instr -> ID IGUAL . expresion_numerica
    (18) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (19) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (20) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (21) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (22) expresion_numerica -> . MENOS expresion_numerica
    (23) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (24) expresion_numerica -> . ENTERO
    (25) expresion_numerica -> . DECIMAL
    (26) expresion_numerica -> . ID

    MENOS           shift and go to state 23
    PARIZQ          shift and go to state 24
    ENTERO          shift and go to state 25
    DECIMAL         shift and go to state 26
    ID              shift and go to state 27

    expresion_numerica             shift and go to state 33

state 21

    (14) mientras_instr -> WHILE expresion_logica . CORIZQ instrucciones CORDER

    CORIZQ          shift and go to state 34


state 22

    (30) expresion_logica -> expresion_numerica . MAYQUE expresion_numerica
    (31) expresion_logica -> expresion_numerica . MENQUE expresion_numerica
    (32) expresion_logica -> expresion_numerica . IGUALQUE expresion_numerica
    (33) expresion_logica -> expresion_numerica . NIGUALQUE expresion_numerica
    (18) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (19) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (20) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (21) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAYQUE          shift and go to state 35
    MENQUE          shift and go to state 36
    IGUALQUE        shift and go to state 37
    NIGUALQUE       shift and go to state 38
    MAS             shift and go to state 39
    MENOS           shift and go to state 40
    POR             shift and go to state 41
    DIVIDIDO        shift and go to state 42


state 23

    (22) expresion_numerica -> MENOS . expresion_numerica
    (18) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (19) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (20) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (21) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (22) expresion_numerica -> . MENOS expresion_numerica
    (23) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (24) expresion_numerica -> . ENTERO
    (25) expresion_numerica -> . DECIMAL
    (26) expresion_numerica -> . ID

    MENOS           shift and go to state 23
    PARIZQ          shift and go to state 24
    ENTERO          shift and go to state 25
    DECIMAL         shift and go to state 26
    ID              shift and go to state 27

    expresion_numerica             shift and go to state 43

state 24

    (23) expresion_numerica -> PARIZQ . expresion_numerica PARDER
    (18) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (19) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (20) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (21) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (22) expresion_numerica -> . MENOS expresion_numerica
    (23) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (24) expresion_numerica -> . ENTERO
    (25) expresion_numerica -> . DECIMAL
    (26) expresion_numerica -> . ID

    MENOS           shift and go to state 23
    PARIZQ          shift and go to state 24
    ENTERO          shift and go to state 25
    DECIMAL         shift and go to state 26
    ID              shift and go to state 27

    expresion_numerica             shift and go to state 44

state 25

    (24) expresion_numerica -> ENTERO .

    MAYQUE          reduce using rule 24 (expresion_numerica -> ENTERO .)
    MENQUE          reduce using rule 24 (expresion_numerica -> ENTERO .)
    IGUALQUE        reduce using rule 24 (expresion_numerica -> ENTERO .)
    NIGUALQUE       reduce using rule 24 (expresion_numerica -> ENTERO .)
    MAS             reduce using rule 24 (expresion_numerica -> ENTERO .)
    MENOS           reduce using rule 24 (expresion_numerica -> ENTERO .)
    POR             reduce using rule 24 (expresion_numerica -> ENTERO .)
    DIVIDIDO        reduce using rule 24 (expresion_numerica -> ENTERO .)
    CORIZQ          reduce using rule 24 (expresion_numerica -> ENTERO .)
    PARDER          reduce using rule 24 (expresion_numerica -> ENTERO .)
    CONCAT          reduce using rule 24 (expresion_numerica -> ENTERO .)
    IMPRIMIR        reduce using rule 24 (expresion_numerica -> ENTERO .)
    NUMERO          reduce using rule 24 (expresion_numerica -> ENTERO .)
    ID              reduce using rule 24 (expresion_numerica -> ENTERO .)
    WHILE           reduce using rule 24 (expresion_numerica -> ENTERO .)
    REPEAT          reduce using rule 24 (expresion_numerica -> ENTERO .)
    IF              reduce using rule 24 (expresion_numerica -> ENTERO .)
    $end            reduce using rule 24 (expresion_numerica -> ENTERO .)
    CORDER          reduce using rule 24 (expresion_numerica -> ENTERO .)


state 26

    (25) expresion_numerica -> DECIMAL .

    MAYQUE          reduce using rule 25 (expresion_numerica -> DECIMAL .)
    MENQUE          reduce using rule 25 (expresion_numerica -> DECIMAL .)
    IGUALQUE        reduce using rule 25 (expresion_numerica -> DECIMAL .)
    NIGUALQUE       reduce using rule 25 (expresion_numerica -> DECIMAL .)
    MAS             reduce using rule 25 (expresion_numerica -> DECIMAL .)
    MENOS           reduce using rule 25 (expresion_numerica -> DECIMAL .)
    POR             reduce using rule 25 (expresion_numerica -> DECIMAL .)
    DIVIDIDO        reduce using rule 25 (expresion_numerica -> DECIMAL .)
    CORIZQ          reduce using rule 25 (expresion_numerica -> DECIMAL .)
    PARDER          reduce using rule 25 (expresion_numerica -> DECIMAL .)
    CONCAT          reduce using rule 25 (expresion_numerica -> DECIMAL .)
    IMPRIMIR        reduce using rule 25 (expresion_numerica -> DECIMAL .)
    NUMERO          reduce using rule 25 (expresion_numerica -> DECIMAL .)
    ID              reduce using rule 25 (expresion_numerica -> DECIMAL .)
    WHILE           reduce using rule 25 (expresion_numerica -> DECIMAL .)
    REPEAT          reduce using rule 25 (expresion_numerica -> DECIMAL .)
    IF              reduce using rule 25 (expresion_numerica -> DECIMAL .)
    $end            reduce using rule 25 (expresion_numerica -> DECIMAL .)
    CORDER          reduce using rule 25 (expresion_numerica -> DECIMAL .)


state 27

    (26) expresion_numerica -> ID .

    MAYQUE          reduce using rule 26 (expresion_numerica -> ID .)
    MENQUE          reduce using rule 26 (expresion_numerica -> ID .)
    IGUALQUE        reduce using rule 26 (expresion_numerica -> ID .)
    NIGUALQUE       reduce using rule 26 (expresion_numerica -> ID .)
    MAS             reduce using rule 26 (expresion_numerica -> ID .)
    MENOS           reduce using rule 26 (expresion_numerica -> ID .)
    POR             reduce using rule 26 (expresion_numerica -> ID .)
    DIVIDIDO        reduce using rule 26 (expresion_numerica -> ID .)
    CORIZQ          reduce using rule 26 (expresion_numerica -> ID .)
    PARDER          reduce using rule 26 (expresion_numerica -> ID .)
    CONCAT          reduce using rule 26 (expresion_numerica -> ID .)
    IMPRIMIR        reduce using rule 26 (expresion_numerica -> ID .)
    NUMERO          reduce using rule 26 (expresion_numerica -> ID .)
    ID              reduce using rule 26 (expresion_numerica -> ID .)
    WHILE           reduce using rule 26 (expresion_numerica -> ID .)
    REPEAT          reduce using rule 26 (expresion_numerica -> ID .)
    IF              reduce using rule 26 (expresion_numerica -> ID .)
    $end            reduce using rule 26 (expresion_numerica -> ID .)
    CORDER          reduce using rule 26 (expresion_numerica -> ID .)


state 28

    (15) repeat_instr -> REPEAT expresion_numerica . CORIZQ instrucciones CORDER
    (18) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (19) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (20) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (21) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    CORIZQ          shift and go to state 45
    MAS             shift and go to state 39
    MENOS           shift and go to state 40
    POR             shift and go to state 41
    DIVIDIDO        shift and go to state 42


state 29

    (16) if_instr -> IF expresion_logica . CORIZQ instrucciones CORDER
    (17) if_else_instr -> IF expresion_logica . CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones CORDER

    CORIZQ          shift and go to state 46


state 30

    (11) imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena . PARDER
    (27) expresion_cadena -> expresion_cadena . CONCAT expresion_cadena

    PARDER          shift and go to state 47
    CONCAT          shift and go to state 48


state 31

    (28) expresion_cadena -> CADENA .

    PARDER          reduce using rule 28 (expresion_cadena -> CADENA .)
    CONCAT          reduce using rule 28 (expresion_cadena -> CADENA .)


state 32

    (29) expresion_cadena -> expresion_numerica .
    (18) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (19) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (20) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (21) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    PARDER          reduce using rule 29 (expresion_cadena -> expresion_numerica .)
    CONCAT          reduce using rule 29 (expresion_cadena -> expresion_numerica .)
    MAS             shift and go to state 39
    MENOS           shift and go to state 40
    POR             shift and go to state 41
    DIVIDIDO        shift and go to state 42


state 33

    (13) asignacion_instr -> ID IGUAL expresion_numerica .
    (18) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (19) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (20) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (21) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    IMPRIMIR        reduce using rule 13 (asignacion_instr -> ID IGUAL expresion_numerica .)
    NUMERO          reduce using rule 13 (asignacion_instr -> ID IGUAL expresion_numerica .)
    ID              reduce using rule 13 (asignacion_instr -> ID IGUAL expresion_numerica .)
    WHILE           reduce using rule 13 (asignacion_instr -> ID IGUAL expresion_numerica .)
    REPEAT          reduce using rule 13 (asignacion_instr -> ID IGUAL expresion_numerica .)
    IF              reduce using rule 13 (asignacion_instr -> ID IGUAL expresion_numerica .)
    $end            reduce using rule 13 (asignacion_instr -> ID IGUAL expresion_numerica .)
    CORDER          reduce using rule 13 (asignacion_instr -> ID IGUAL expresion_numerica .)
    MAS             shift and go to state 39
    MENOS           shift and go to state 40
    POR             shift and go to state 41
    DIVIDIDO        shift and go to state 42


state 34

    (14) mientras_instr -> WHILE expresion_logica CORIZQ . instrucciones CORDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . repeat_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER
    (12) definicion_instr -> . NUMERO ID
    (13) asignacion_instr -> . ID IGUAL expresion_numerica
    (14) mientras_instr -> . WHILE expresion_logica CORIZQ instrucciones CORDER
    (15) repeat_instr -> . REPEAT expresion_numerica CORIZQ instrucciones CORDER
    (16) if_instr -> . IF expresion_logica CORIZQ instrucciones CORDER
    (17) if_else_instr -> . IF expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones CORDER

    IMPRIMIR        shift and go to state 11
    NUMERO          shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    IF              shift and go to state 16

    instrucciones                  shift and go to state 49
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    repeat_instr                   shift and go to state 8
    if_instr                       shift and go to state 9
    if_else_instr                  shift and go to state 10

state 35

    (30) expresion_logica -> expresion_numerica MAYQUE . expresion_numerica
    (18) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (19) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (20) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (21) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (22) expresion_numerica -> . MENOS expresion_numerica
    (23) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (24) expresion_numerica -> . ENTERO
    (25) expresion_numerica -> . DECIMAL
    (26) expresion_numerica -> . ID

    MENOS           shift and go to state 23
    PARIZQ          shift and go to state 24
    ENTERO          shift and go to state 25
    DECIMAL         shift and go to state 26
    ID              shift and go to state 27

    expresion_numerica             shift and go to state 50

state 36

    (31) expresion_logica -> expresion_numerica MENQUE . expresion_numerica
    (18) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (19) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (20) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (21) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (22) expresion_numerica -> . MENOS expresion_numerica
    (23) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (24) expresion_numerica -> . ENTERO
    (25) expresion_numerica -> . DECIMAL
    (26) expresion_numerica -> . ID

    MENOS           shift and go to state 23
    PARIZQ          shift and go to state 24
    ENTERO          shift and go to state 25
    DECIMAL         shift and go to state 26
    ID              shift and go to state 27

    expresion_numerica             shift and go to state 51

state 37

    (32) expresion_logica -> expresion_numerica IGUALQUE . expresion_numerica
    (18) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (19) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (20) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (21) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (22) expresion_numerica -> . MENOS expresion_numerica
    (23) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (24) expresion_numerica -> . ENTERO
    (25) expresion_numerica -> . DECIMAL
    (26) expresion_numerica -> . ID

    MENOS           shift and go to state 23
    PARIZQ          shift and go to state 24
    ENTERO          shift and go to state 25
    DECIMAL         shift and go to state 26
    ID              shift and go to state 27

    expresion_numerica             shift and go to state 52

state 38

    (33) expresion_logica -> expresion_numerica NIGUALQUE . expresion_numerica
    (18) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (19) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (20) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (21) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (22) expresion_numerica -> . MENOS expresion_numerica
    (23) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (24) expresion_numerica -> . ENTERO
    (25) expresion_numerica -> . DECIMAL
    (26) expresion_numerica -> . ID

    MENOS           shift and go to state 23
    PARIZQ          shift and go to state 24
    ENTERO          shift and go to state 25
    DECIMAL         shift and go to state 26
    ID              shift and go to state 27

    expresion_numerica             shift and go to state 53

state 39

    (18) expresion_numerica -> expresion_numerica MAS . expresion_numerica
    (18) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (19) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (20) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (21) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (22) expresion_numerica -> . MENOS expresion_numerica
    (23) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (24) expresion_numerica -> . ENTERO
    (25) expresion_numerica -> . DECIMAL
    (26) expresion_numerica -> . ID

    MENOS           shift and go to state 23
    PARIZQ          shift and go to state 24
    ENTERO          shift and go to state 25
    DECIMAL         shift and go to state 26
    ID              shift and go to state 27

    expresion_numerica             shift and go to state 54

state 40

    (19) expresion_numerica -> expresion_numerica MENOS . expresion_numerica
    (18) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (19) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (20) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (21) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (22) expresion_numerica -> . MENOS expresion_numerica
    (23) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (24) expresion_numerica -> . ENTERO
    (25) expresion_numerica -> . DECIMAL
    (26) expresion_numerica -> . ID

    MENOS           shift and go to state 23
    PARIZQ          shift and go to state 24
    ENTERO          shift and go to state 25
    DECIMAL         shift and go to state 26
    ID              shift and go to state 27

    expresion_numerica             shift and go to state 55

state 41

    (20) expresion_numerica -> expresion_numerica POR . expresion_numerica
    (18) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (19) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (20) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (21) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (22) expresion_numerica -> . MENOS expresion_numerica
    (23) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (24) expresion_numerica -> . ENTERO
    (25) expresion_numerica -> . DECIMAL
    (26) expresion_numerica -> . ID

    MENOS           shift and go to state 23
    PARIZQ          shift and go to state 24
    ENTERO          shift and go to state 25
    DECIMAL         shift and go to state 26
    ID              shift and go to state 27

    expresion_numerica             shift and go to state 56

state 42

    (21) expresion_numerica -> expresion_numerica DIVIDIDO . expresion_numerica
    (18) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (19) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (20) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (21) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (22) expresion_numerica -> . MENOS expresion_numerica
    (23) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (24) expresion_numerica -> . ENTERO
    (25) expresion_numerica -> . DECIMAL
    (26) expresion_numerica -> . ID

    MENOS           shift and go to state 23
    PARIZQ          shift and go to state 24
    ENTERO          shift and go to state 25
    DECIMAL         shift and go to state 26
    ID              shift and go to state 27

    expresion_numerica             shift and go to state 57

state 43

    (22) expresion_numerica -> MENOS expresion_numerica .
    (18) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (19) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (20) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (21) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAYQUE          reduce using rule 22 (expresion_numerica -> MENOS expresion_numerica .)
    MENQUE          reduce using rule 22 (expresion_numerica -> MENOS expresion_numerica .)
    IGUALQUE        reduce using rule 22 (expresion_numerica -> MENOS expresion_numerica .)
    NIGUALQUE       reduce using rule 22 (expresion_numerica -> MENOS expresion_numerica .)
    MAS             reduce using rule 22 (expresion_numerica -> MENOS expresion_numerica .)
    MENOS           reduce using rule 22 (expresion_numerica -> MENOS expresion_numerica .)
    POR             reduce using rule 22 (expresion_numerica -> MENOS expresion_numerica .)
    DIVIDIDO        reduce using rule 22 (expresion_numerica -> MENOS expresion_numerica .)
    CORIZQ          reduce using rule 22 (expresion_numerica -> MENOS expresion_numerica .)
    PARDER          reduce using rule 22 (expresion_numerica -> MENOS expresion_numerica .)
    CONCAT          reduce using rule 22 (expresion_numerica -> MENOS expresion_numerica .)
    IMPRIMIR        reduce using rule 22 (expresion_numerica -> MENOS expresion_numerica .)
    NUMERO          reduce using rule 22 (expresion_numerica -> MENOS expresion_numerica .)
    ID              reduce using rule 22 (expresion_numerica -> MENOS expresion_numerica .)
    WHILE           reduce using rule 22 (expresion_numerica -> MENOS expresion_numerica .)
    REPEAT          reduce using rule 22 (expresion_numerica -> MENOS expresion_numerica .)
    IF              reduce using rule 22 (expresion_numerica -> MENOS expresion_numerica .)
    $end            reduce using rule 22 (expresion_numerica -> MENOS expresion_numerica .)
    CORDER          reduce using rule 22 (expresion_numerica -> MENOS expresion_numerica .)

  ! MAS             [ shift and go to state 39 ]
  ! MENOS           [ shift and go to state 40 ]
  ! POR             [ shift and go to state 41 ]
  ! DIVIDIDO        [ shift and go to state 42 ]


state 44

    (23) expresion_numerica -> PARIZQ expresion_numerica . PARDER
    (18) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (19) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (20) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (21) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    PARDER          shift and go to state 58
    MAS             shift and go to state 39
    MENOS           shift and go to state 40
    POR             shift and go to state 41
    DIVIDIDO        shift and go to state 42


state 45

    (15) repeat_instr -> REPEAT expresion_numerica CORIZQ . instrucciones CORDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . repeat_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER
    (12) definicion_instr -> . NUMERO ID
    (13) asignacion_instr -> . ID IGUAL expresion_numerica
    (14) mientras_instr -> . WHILE expresion_logica CORIZQ instrucciones CORDER
    (15) repeat_instr -> . REPEAT expresion_numerica CORIZQ instrucciones CORDER
    (16) if_instr -> . IF expresion_logica CORIZQ instrucciones CORDER
    (17) if_else_instr -> . IF expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones CORDER

    IMPRIMIR        shift and go to state 11
    NUMERO          shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    IF              shift and go to state 16

    instrucciones                  shift and go to state 59
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    repeat_instr                   shift and go to state 8
    if_instr                       shift and go to state 9
    if_else_instr                  shift and go to state 10

state 46

    (16) if_instr -> IF expresion_logica CORIZQ . instrucciones CORDER
    (17) if_else_instr -> IF expresion_logica CORIZQ . instrucciones CORDER ELSE CORIZQ instrucciones CORDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . repeat_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER
    (12) definicion_instr -> . NUMERO ID
    (13) asignacion_instr -> . ID IGUAL expresion_numerica
    (14) mientras_instr -> . WHILE expresion_logica CORIZQ instrucciones CORDER
    (15) repeat_instr -> . REPEAT expresion_numerica CORIZQ instrucciones CORDER
    (16) if_instr -> . IF expresion_logica CORIZQ instrucciones CORDER
    (17) if_else_instr -> . IF expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones CORDER

    IMPRIMIR        shift and go to state 11
    NUMERO          shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    IF              shift and go to state 16

    instrucciones                  shift and go to state 60
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    repeat_instr                   shift and go to state 8
    if_instr                       shift and go to state 9
    if_else_instr                  shift and go to state 10

state 47

    (11) imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER .

    IMPRIMIR        reduce using rule 11 (imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER .)
    NUMERO          reduce using rule 11 (imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER .)
    ID              reduce using rule 11 (imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER .)
    WHILE           reduce using rule 11 (imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER .)
    REPEAT          reduce using rule 11 (imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER .)
    IF              reduce using rule 11 (imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER .)
    $end            reduce using rule 11 (imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER .)
    CORDER          reduce using rule 11 (imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER .)


state 48

    (27) expresion_cadena -> expresion_cadena CONCAT . expresion_cadena
    (27) expresion_cadena -> . expresion_cadena CONCAT expresion_cadena
    (28) expresion_cadena -> . CADENA
    (29) expresion_cadena -> . expresion_numerica
    (18) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (19) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (20) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (21) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (22) expresion_numerica -> . MENOS expresion_numerica
    (23) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (24) expresion_numerica -> . ENTERO
    (25) expresion_numerica -> . DECIMAL
    (26) expresion_numerica -> . ID

    CADENA          shift and go to state 31
    MENOS           shift and go to state 23
    PARIZQ          shift and go to state 24
    ENTERO          shift and go to state 25
    DECIMAL         shift and go to state 26
    ID              shift and go to state 27

    expresion_cadena               shift and go to state 61
    expresion_numerica             shift and go to state 32

state 49

    (14) mientras_instr -> WHILE expresion_logica CORIZQ instrucciones . CORDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . repeat_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER
    (12) definicion_instr -> . NUMERO ID
    (13) asignacion_instr -> . ID IGUAL expresion_numerica
    (14) mientras_instr -> . WHILE expresion_logica CORIZQ instrucciones CORDER
    (15) repeat_instr -> . REPEAT expresion_numerica CORIZQ instrucciones CORDER
    (16) if_instr -> . IF expresion_logica CORIZQ instrucciones CORDER
    (17) if_else_instr -> . IF expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones CORDER

    CORDER          shift and go to state 62
    IMPRIMIR        shift and go to state 11
    NUMERO          shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    IF              shift and go to state 16

    instruccion                    shift and go to state 17
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    repeat_instr                   shift and go to state 8
    if_instr                       shift and go to state 9
    if_else_instr                  shift and go to state 10

state 50

    (30) expresion_logica -> expresion_numerica MAYQUE expresion_numerica .
    (18) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (19) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (20) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (21) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    CORIZQ          reduce using rule 30 (expresion_logica -> expresion_numerica MAYQUE expresion_numerica .)
    MAS             shift and go to state 39
    MENOS           shift and go to state 40
    POR             shift and go to state 41
    DIVIDIDO        shift and go to state 42


state 51

    (31) expresion_logica -> expresion_numerica MENQUE expresion_numerica .
    (18) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (19) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (20) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (21) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    CORIZQ          reduce using rule 31 (expresion_logica -> expresion_numerica MENQUE expresion_numerica .)
    MAS             shift and go to state 39
    MENOS           shift and go to state 40
    POR             shift and go to state 41
    DIVIDIDO        shift and go to state 42


state 52

    (32) expresion_logica -> expresion_numerica IGUALQUE expresion_numerica .
    (18) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (19) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (20) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (21) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    CORIZQ          reduce using rule 32 (expresion_logica -> expresion_numerica IGUALQUE expresion_numerica .)
    MAS             shift and go to state 39
    MENOS           shift and go to state 40
    POR             shift and go to state 41
    DIVIDIDO        shift and go to state 42


state 53

    (33) expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica .
    (18) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (19) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (20) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (21) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    CORIZQ          reduce using rule 33 (expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica .)
    MAS             shift and go to state 39
    MENOS           shift and go to state 40
    POR             shift and go to state 41
    DIVIDIDO        shift and go to state 42


state 54

    (18) expresion_numerica -> expresion_numerica MAS expresion_numerica .
    (18) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (19) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (20) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (21) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAYQUE          reduce using rule 18 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MENQUE          reduce using rule 18 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    IGUALQUE        reduce using rule 18 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    NIGUALQUE       reduce using rule 18 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MAS             reduce using rule 18 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MENOS           reduce using rule 18 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    CORIZQ          reduce using rule 18 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    PARDER          reduce using rule 18 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    CONCAT          reduce using rule 18 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    IMPRIMIR        reduce using rule 18 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    NUMERO          reduce using rule 18 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    ID              reduce using rule 18 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    WHILE           reduce using rule 18 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    REPEAT          reduce using rule 18 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    IF              reduce using rule 18 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    $end            reduce using rule 18 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    CORDER          reduce using rule 18 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    POR             shift and go to state 41
    DIVIDIDO        shift and go to state 42

  ! POR             [ reduce using rule 18 (expresion_numerica -> expresion_numerica MAS expresion_numerica .) ]
  ! DIVIDIDO        [ reduce using rule 18 (expresion_numerica -> expresion_numerica MAS expresion_numerica .) ]
  ! MAS             [ shift and go to state 39 ]
  ! MENOS           [ shift and go to state 40 ]


state 55

    (19) expresion_numerica -> expresion_numerica MENOS expresion_numerica .
    (18) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (19) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (20) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (21) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAYQUE          reduce using rule 19 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MENQUE          reduce using rule 19 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    IGUALQUE        reduce using rule 19 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    NIGUALQUE       reduce using rule 19 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MAS             reduce using rule 19 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MENOS           reduce using rule 19 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    CORIZQ          reduce using rule 19 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    PARDER          reduce using rule 19 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    CONCAT          reduce using rule 19 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    IMPRIMIR        reduce using rule 19 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    NUMERO          reduce using rule 19 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    ID              reduce using rule 19 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    WHILE           reduce using rule 19 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    REPEAT          reduce using rule 19 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    IF              reduce using rule 19 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    $end            reduce using rule 19 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    CORDER          reduce using rule 19 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    POR             shift and go to state 41
    DIVIDIDO        shift and go to state 42

  ! POR             [ reduce using rule 19 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .) ]
  ! DIVIDIDO        [ reduce using rule 19 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .) ]
  ! MAS             [ shift and go to state 39 ]
  ! MENOS           [ shift and go to state 40 ]


state 56

    (20) expresion_numerica -> expresion_numerica POR expresion_numerica .
    (18) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (19) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (20) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (21) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAYQUE          reduce using rule 20 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MENQUE          reduce using rule 20 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    IGUALQUE        reduce using rule 20 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    NIGUALQUE       reduce using rule 20 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MAS             reduce using rule 20 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MENOS           reduce using rule 20 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    POR             reduce using rule 20 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    DIVIDIDO        reduce using rule 20 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    CORIZQ          reduce using rule 20 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    PARDER          reduce using rule 20 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    CONCAT          reduce using rule 20 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    IMPRIMIR        reduce using rule 20 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    NUMERO          reduce using rule 20 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    ID              reduce using rule 20 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    WHILE           reduce using rule 20 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    REPEAT          reduce using rule 20 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    IF              reduce using rule 20 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    $end            reduce using rule 20 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    CORDER          reduce using rule 20 (expresion_numerica -> expresion_numerica POR expresion_numerica .)

  ! MAS             [ shift and go to state 39 ]
  ! MENOS           [ shift and go to state 40 ]
  ! POR             [ shift and go to state 41 ]
  ! DIVIDIDO        [ shift and go to state 42 ]


state 57

    (21) expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .
    (18) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (19) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (20) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (21) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAYQUE          reduce using rule 21 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MENQUE          reduce using rule 21 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    IGUALQUE        reduce using rule 21 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    NIGUALQUE       reduce using rule 21 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MAS             reduce using rule 21 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MENOS           reduce using rule 21 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    POR             reduce using rule 21 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    DIVIDIDO        reduce using rule 21 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    CORIZQ          reduce using rule 21 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    PARDER          reduce using rule 21 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    CONCAT          reduce using rule 21 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    IMPRIMIR        reduce using rule 21 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    NUMERO          reduce using rule 21 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    ID              reduce using rule 21 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    WHILE           reduce using rule 21 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    REPEAT          reduce using rule 21 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    IF              reduce using rule 21 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    $end            reduce using rule 21 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    CORDER          reduce using rule 21 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)

  ! MAS             [ shift and go to state 39 ]
  ! MENOS           [ shift and go to state 40 ]
  ! POR             [ shift and go to state 41 ]
  ! DIVIDIDO        [ shift and go to state 42 ]


state 58

    (23) expresion_numerica -> PARIZQ expresion_numerica PARDER .

    MAYQUE          reduce using rule 23 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MENQUE          reduce using rule 23 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    IGUALQUE        reduce using rule 23 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    NIGUALQUE       reduce using rule 23 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MAS             reduce using rule 23 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MENOS           reduce using rule 23 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    POR             reduce using rule 23 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    DIVIDIDO        reduce using rule 23 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    CORIZQ          reduce using rule 23 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    PARDER          reduce using rule 23 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    CONCAT          reduce using rule 23 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    IMPRIMIR        reduce using rule 23 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    NUMERO          reduce using rule 23 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    ID              reduce using rule 23 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    WHILE           reduce using rule 23 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    REPEAT          reduce using rule 23 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    IF              reduce using rule 23 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    $end            reduce using rule 23 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    CORDER          reduce using rule 23 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)


state 59

    (15) repeat_instr -> REPEAT expresion_numerica CORIZQ instrucciones . CORDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . repeat_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER
    (12) definicion_instr -> . NUMERO ID
    (13) asignacion_instr -> . ID IGUAL expresion_numerica
    (14) mientras_instr -> . WHILE expresion_logica CORIZQ instrucciones CORDER
    (15) repeat_instr -> . REPEAT expresion_numerica CORIZQ instrucciones CORDER
    (16) if_instr -> . IF expresion_logica CORIZQ instrucciones CORDER
    (17) if_else_instr -> . IF expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones CORDER

    CORDER          shift and go to state 63
    IMPRIMIR        shift and go to state 11
    NUMERO          shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    IF              shift and go to state 16

    instruccion                    shift and go to state 17
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    repeat_instr                   shift and go to state 8
    if_instr                       shift and go to state 9
    if_else_instr                  shift and go to state 10

state 60

    (16) if_instr -> IF expresion_logica CORIZQ instrucciones . CORDER
    (17) if_else_instr -> IF expresion_logica CORIZQ instrucciones . CORDER ELSE CORIZQ instrucciones CORDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . repeat_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER
    (12) definicion_instr -> . NUMERO ID
    (13) asignacion_instr -> . ID IGUAL expresion_numerica
    (14) mientras_instr -> . WHILE expresion_logica CORIZQ instrucciones CORDER
    (15) repeat_instr -> . REPEAT expresion_numerica CORIZQ instrucciones CORDER
    (16) if_instr -> . IF expresion_logica CORIZQ instrucciones CORDER
    (17) if_else_instr -> . IF expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones CORDER

    CORDER          shift and go to state 64
    IMPRIMIR        shift and go to state 11
    NUMERO          shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    IF              shift and go to state 16

    instruccion                    shift and go to state 17
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    repeat_instr                   shift and go to state 8
    if_instr                       shift and go to state 9
    if_else_instr                  shift and go to state 10

state 61

    (27) expresion_cadena -> expresion_cadena CONCAT expresion_cadena .
    (27) expresion_cadena -> expresion_cadena . CONCAT expresion_cadena

    PARDER          reduce using rule 27 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    CONCAT          reduce using rule 27 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)

  ! CONCAT          [ shift and go to state 48 ]


state 62

    (14) mientras_instr -> WHILE expresion_logica CORIZQ instrucciones CORDER .

    IMPRIMIR        reduce using rule 14 (mientras_instr -> WHILE expresion_logica CORIZQ instrucciones CORDER .)
    NUMERO          reduce using rule 14 (mientras_instr -> WHILE expresion_logica CORIZQ instrucciones CORDER .)
    ID              reduce using rule 14 (mientras_instr -> WHILE expresion_logica CORIZQ instrucciones CORDER .)
    WHILE           reduce using rule 14 (mientras_instr -> WHILE expresion_logica CORIZQ instrucciones CORDER .)
    REPEAT          reduce using rule 14 (mientras_instr -> WHILE expresion_logica CORIZQ instrucciones CORDER .)
    IF              reduce using rule 14 (mientras_instr -> WHILE expresion_logica CORIZQ instrucciones CORDER .)
    $end            reduce using rule 14 (mientras_instr -> WHILE expresion_logica CORIZQ instrucciones CORDER .)
    CORDER          reduce using rule 14 (mientras_instr -> WHILE expresion_logica CORIZQ instrucciones CORDER .)


state 63

    (15) repeat_instr -> REPEAT expresion_numerica CORIZQ instrucciones CORDER .

    IMPRIMIR        reduce using rule 15 (repeat_instr -> REPEAT expresion_numerica CORIZQ instrucciones CORDER .)
    NUMERO          reduce using rule 15 (repeat_instr -> REPEAT expresion_numerica CORIZQ instrucciones CORDER .)
    ID              reduce using rule 15 (repeat_instr -> REPEAT expresion_numerica CORIZQ instrucciones CORDER .)
    WHILE           reduce using rule 15 (repeat_instr -> REPEAT expresion_numerica CORIZQ instrucciones CORDER .)
    REPEAT          reduce using rule 15 (repeat_instr -> REPEAT expresion_numerica CORIZQ instrucciones CORDER .)
    IF              reduce using rule 15 (repeat_instr -> REPEAT expresion_numerica CORIZQ instrucciones CORDER .)
    $end            reduce using rule 15 (repeat_instr -> REPEAT expresion_numerica CORIZQ instrucciones CORDER .)
    CORDER          reduce using rule 15 (repeat_instr -> REPEAT expresion_numerica CORIZQ instrucciones CORDER .)


state 64

    (16) if_instr -> IF expresion_logica CORIZQ instrucciones CORDER .
    (17) if_else_instr -> IF expresion_logica CORIZQ instrucciones CORDER . ELSE CORIZQ instrucciones CORDER

    IMPRIMIR        reduce using rule 16 (if_instr -> IF expresion_logica CORIZQ instrucciones CORDER .)
    NUMERO          reduce using rule 16 (if_instr -> IF expresion_logica CORIZQ instrucciones CORDER .)
    ID              reduce using rule 16 (if_instr -> IF expresion_logica CORIZQ instrucciones CORDER .)
    WHILE           reduce using rule 16 (if_instr -> IF expresion_logica CORIZQ instrucciones CORDER .)
    REPEAT          reduce using rule 16 (if_instr -> IF expresion_logica CORIZQ instrucciones CORDER .)
    IF              reduce using rule 16 (if_instr -> IF expresion_logica CORIZQ instrucciones CORDER .)
    $end            reduce using rule 16 (if_instr -> IF expresion_logica CORIZQ instrucciones CORDER .)
    CORDER          reduce using rule 16 (if_instr -> IF expresion_logica CORIZQ instrucciones CORDER .)
    ELSE            shift and go to state 65


state 65

    (17) if_else_instr -> IF expresion_logica CORIZQ instrucciones CORDER ELSE . CORIZQ instrucciones CORDER

    CORIZQ          shift and go to state 66


state 66

    (17) if_else_instr -> IF expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ . instrucciones CORDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . repeat_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER
    (12) definicion_instr -> . NUMERO ID
    (13) asignacion_instr -> . ID IGUAL expresion_numerica
    (14) mientras_instr -> . WHILE expresion_logica CORIZQ instrucciones CORDER
    (15) repeat_instr -> . REPEAT expresion_numerica CORIZQ instrucciones CORDER
    (16) if_instr -> . IF expresion_logica CORIZQ instrucciones CORDER
    (17) if_else_instr -> . IF expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones CORDER

    IMPRIMIR        shift and go to state 11
    NUMERO          shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    IF              shift and go to state 16

    instrucciones                  shift and go to state 67
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    repeat_instr                   shift and go to state 8
    if_instr                       shift and go to state 9
    if_else_instr                  shift and go to state 10

state 67

    (17) if_else_instr -> IF expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones . CORDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . repeat_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER
    (12) definicion_instr -> . NUMERO ID
    (13) asignacion_instr -> . ID IGUAL expresion_numerica
    (14) mientras_instr -> . WHILE expresion_logica CORIZQ instrucciones CORDER
    (15) repeat_instr -> . REPEAT expresion_numerica CORIZQ instrucciones CORDER
    (16) if_instr -> . IF expresion_logica CORIZQ instrucciones CORDER
    (17) if_else_instr -> . IF expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones CORDER

    CORDER          shift and go to state 68
    IMPRIMIR        shift and go to state 11
    NUMERO          shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    IF              shift and go to state 16

    instruccion                    shift and go to state 17
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    repeat_instr                   shift and go to state 8
    if_instr                       shift and go to state 9
    if_else_instr                  shift and go to state 10

state 68

    (17) if_else_instr -> IF expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones CORDER .

    IMPRIMIR        reduce using rule 17 (if_else_instr -> IF expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones CORDER .)
    NUMERO          reduce using rule 17 (if_else_instr -> IF expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones CORDER .)
    ID              reduce using rule 17 (if_else_instr -> IF expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones CORDER .)
    WHILE           reduce using rule 17 (if_else_instr -> IF expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones CORDER .)
    REPEAT          reduce using rule 17 (if_else_instr -> IF expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones CORDER .)
    IF              reduce using rule 17 (if_else_instr -> IF expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones CORDER .)
    $end            reduce using rule 17 (if_else_instr -> IF expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones CORDER .)
    CORDER          reduce using rule 17 (if_else_instr -> IF expresion_logica CORIZQ instrucciones CORDER ELSE CORIZQ instrucciones CORDER .)

