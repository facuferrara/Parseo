basado en LOGO, utilizando PLY (Python Lex-Yacc). Esto incluye la parte léxica (análisis léxico) y la parte sintáctica (análisis sintáctico). A continuación te dejo el código paso a paso:

1. Instalación de PLY
Si no tienes PLY instalado, puedes hacerlo ejecutando el siguiente comando:

bash
Copiar código
pip install ply
2. Análisis Léxico
El análisis léxico se encarga de dividir el código fuente en tokens, que son las unidades básicas del lenguaje (palabras clave, números, etc.). Vamos a definir los tokens para tu lenguaje personalizado (LOGO):

Definición de tokens:
AVANZA: Mueve la tortuga hacia adelante.
GIRA_IZQUIERDA: Gira la tortuga hacia la izquierda.
GIRA_DERECHA: Gira la tortuga hacia la derecha.
REPITE: Repite un bloque de instrucciones.
NUMERO: Cualquier número entero positivo.
python
Copiar código
import ply.lex as lex

# Definir los tokens
tokens = (
    'AVANZA',
    'GIRA_IZQUIERDA',
    'GIRA_DERECHA',
    'REPITE',
    'NUMERO',
    'LBRACKET',  # [
    'RBRACKET'   # ]
)

# Definir las expresiones regulares para cada token
t_AVANZA = r'AVANZA'
t_GIRA_IZQUIERDA = r'GIRA_IZQUIERDA'
t_GIRA_DERECHA = r'GIRA_DERECHA'
t_REPITE = r'REPITE'
t_LBRACKET = r'\['
t_RBRACKET = r'\]'

# Definir el token para números
def t_NUMERO(t):
    r'\d+'
    t.value = int(t.value)  # Convertir a entero
    return t

# Ignorar espacios y saltos de línea
t_ignore = ' \t\n'

# Manejar errores léxicos
def t_error(t):
    print(f"Carácter ilegal '{t.value[0]}'")
    t.lexer.skip(1)

# Construir el lexer
lexer = lex.lex()
Este código define el lexer que tomará el código fuente y lo dividirá en tokens.

3. Análisis Sintáctico
El análisis sintáctico se encargará de tomar los tokens y definir su estructura, asegurándose de que las instrucciones sigan las reglas gramaticales de tu lenguaje. Luego, generará las instrucciones equivalentes en Python (para usar con Turtle, por ejemplo).

Definición de la gramática:
Vamos a definir una gramática simple para tu lenguaje que soporte las instrucciones básicas (AVANZA, GIRA_IZQUIERDA, GIRA_DERECHA) y también la estructura de repetición (REPITE).

python
Copiar código
import ply.yacc as yacc

# Definir las reglas gramaticales

# Instrucciones (secuencia de instrucciones)
def p_instrucciones(p):
    '''instrucciones : instruccion
                     | instrucciones instruccion'''
    if len(p) == 2:
        p[0] = [p[1]]
    else:
        p[0] = p[1] + [p[2]]

# Instrucción: AVANZA, GIRA_IZQUIERDA, GIRA_DERECHA
def p_instruccion(p):
    '''instruccion : AVANZA NUMERO
                   | GIRA_IZQUIERDA NUMERO
                   | GIRA_DERECHA NUMERO'''
    if p[1] == 'AVANZA':
        p[0] = f't.forward({p[2]})'
    elif p[1] == 'GIRA_IZQUIERDA':
        p[0] = f't.left({p[2]})'
    elif p[1] == 'GIRA_DERECHA':
        p[0] = f't.right({p[2]})'

# Instrucción de repetición
def p_instruccion_repite(p):
    'instruccion : REPITE NUMERO LBRACKET instrucciones RBRACKET'
    p[0] = f'for _ in range({p[2]}):\n    ' + '\n    '.join(p[4])

# Manejar errores sintácticos
def p_error(p):
    print(f"Error de sintaxis en '{p.value}'")

# Construir el parser
parser = yacc.yacc()
4. Ejemplo de uso
Con el lexer y el parser definidos, ahora podemos procesar un código fuente en tu lenguaje personalizado y generar las instrucciones equivalentes en Python para ejecutarlas.

Código de ejemplo:
Supongamos que tienes este código en tu lenguaje:

plaintext
Copiar código
AVANZA 100
GIRA_IZQUIERDA 90
REPITE 4 [ AVANZA 50 GIRA_DERECHA 90 ]
Procesar el código:
python
Copiar código
codigo_fuente = '''
AVANZA 100
GIRA_IZQUIERDA 90
REPITE 4 [ AVANZA 50 GIRA_DERECHA 90 ]
'''

# Generar tokens con el lexer
lexer.input(codigo_fuente)

print("Tokens generados:")
while True:
    tok = lexer.token()
    if not tok:
        break
    print(tok)

# Parsear y compilar el código
resultado = parser.parse(codigo_fuente)
print("\nCódigo Python generado:")
for instruccion in resultado:
    print(instruccion)
Resultado esperado:
El código anterior generaría el siguiente código en Python, que podrías ejecutar con la librería turtle o similar:

python
Copiar código
t.forward(100)
t.left(90)
for _ in range(4):
    t.forward(50)
    t.right(90)
5. Ejecución con Turtle
Finalmente, puedes ejecutar el código resultante en Python Turtle para visualizar el movimiento de la tortuga en la pantalla.

Conclusión
Este es un compilador básico que toma instrucciones de un lenguaje LOGO personalizado y las convierte en código Python que utiliza la librería Turtle. Puedes extenderlo para incluir más funcionalidades como bucles, procedimientos, y condiciones. ¡Es un buen punto de partida para crear tu propio lenguaje!